name: Docker Multi-Arch

on:
  workflow_dispatch:
  push:
    branches: [ main ]
  schedule:
    - cron: '00 00 * * *'

env:
  ALIYUN_REGISTRY: "${{ secrets.ALIYUN_REGISTRY }}"
  ALIYUN_NAME_SPACE: "${{ secrets.ALIYUN_NAME_SPACE }}"
  ALIYUN_REGISTRY_USER: "${{ secrets.ALIYUN_REGISTRY_USER }}"
  ALIYUN_REGISTRY_PASSWORD: "${{ secrets.ALIYUN_REGISTRY_PASSWORD }}"

jobs:
  build:
    name: Pull and Push Multi-Arch
    runs-on: ubuntu-latest
    steps:
    - name: Before freeing up disk space
      run: |
        echo "Before freeing up disk space"
        echo "=============================================================================="
        df -hT
        echo "=============================================================================="

    - name: Maximize build space
      uses: easimon/maximize-build-space@master
      with:
        root-reserve-mb: 2048
        swap-size-mb: 128
        remove-dotnet: 'true'
        remove-haskell: 'true'
        build-mount-path: '/var/lib/docker/'

    - name: Restart docker
      run: sudo service docker restart

    - name: Free up disk space complete
      run: |
        echo "Free up disk space complete"
        echo "=============================================================================="
        df -hT
        echo "=============================================================================="

    - name: Checkout Code
      uses: actions/checkout@v4

    - name: Set up QEMU
      uses: docker/setup-qemu-action@v3
      
    - name: Docker Setup Buildx
      uses: docker/setup-buildx-action@v3

    - name: Login to Aliyun Registry
      run: |
        echo $ALIYUN_REGISTRY_PASSWORD | docker login -u $ALIYUN_REGISTRY_USER --password-stdin $ALIYUN_REGISTRY

    - name: Process Images
      run: |
        # 数据预处理,判断镜像是否重名
        declare -A duplicate_images
        declare -A temp_map
        while IFS= read -r line || [ -n "$line" ]; do
            [[ -z "$line" || "$line" =~ ^\s*# ]] && continue
            
            image=$(echo "$line" | awk '{print $NF}' | sed 's/@sha256.*//')
            image_name_tag=$(echo "$image" | awk -F'/' '{print $NF}')
            name_space=$(echo "$image" | awk -F'/' '{if (NF==3) print $2; else if (NF==2) print $1; else ""}')
            image_name=$(echo "$image_name_tag" | awk -F':' '{print $1}')
            
            if [[ -n "${temp_map[$image_name]}" && "${temp_map[$image_name]}" != "${name_space}_" ]]; then
                echo "duplicate image name: $image_name"
                duplicate_images[$image_name]="true"
            fi
            temp_map[$image_name]="${name_space}_"
        done < images.txt
        
        # 定义支持的架构
        SUPPORTED_PLATFORMS="linux/X86,linux/arm64"
        
        # 定义错误计数器
        error_count=0
        
        while IFS= read -r line || [ -n "$line" ]; do
            [[ -z "$line" || "$line" =~ ^\s*# ]] && continue
            
            image=$(echo "$line" | awk '{print $NF}' | sed 's/@sha256.*//')
            image_name_tag=$(echo "$image" | awk -F'/' '{print $NF}')
            name_space=$(echo "$image" | awk -F'/' '{if (NF==3) print $2; else if (NF==2) print $1; else ""}')
            image_name=$(echo "$image_name_tag" | awk -F':' '{print $1}')
            
            name_space_prefix=""
            if [[ -n "${duplicate_images[$image_name]}" && -n "$name_space" ]]; then
                name_space_prefix="${name_space}_"
            fi
            
            new_image_base="$ALIYUN_REGISTRY/$ALIYUN_NAME_SPACE/$name_space_prefix$image_name_tag"
            echo "Processing image: $image -> $new_image_base"
            
            # 创建临时文件存储构建结果
            BUILD_RESULTS=$(mktemp)
            echo "" > $BUILD_RESULTS
            
            # 检查镜像支持的架构
            supported_archs=$(docker buildx imagetools inspect $image --format='{{range .Platforms}}{{.Architecture}}/{{.Variant}} {{end}}' 2>/dev/null || echo "")
            echo "镜像 $image 支持的架构: $supported_archs"
            
            for platform in $(echo $SUPPORTED_PLATFORMS | tr ',' ' '); do
                arch=$(echo $platform | awk -F'/' '{print $2}')
                variant=$(echo $platform | awk -F'/' '{print $3}')
                platform_suffix="${platform//\//_}"
                new_image_platform="$new_image_base-$platform_suffix"
                
                # 检查镜像是否支持该架构
                if [[ -z "$supported_archs" ]]; then
                    echo "无法获取镜像架构信息，尝试构建 $platform"
                elif [[ ! $supported_archs == *"$arch"* ]]; then
                    echo "镜像 $image 不支持 $platform，跳过"
                    continue
                elif [ -n "$variant" ] && [[ ! $supported_archs == *"$arch/$variant"* ]]; then
                    echo "镜像 $image 不支持 $platform (需要 $arch/$variant)，跳过"
                    continue
                fi
                
                echo "Building for platform: $platform"
                
                # 创建临时Dockerfile
                TEMP_DOCKERFILE=$(mktemp)
                echo "FROM $image" > $TEMP_DOCKERFILE
                
                # 构建镜像并捕获输出
                if docker buildx build \
                  --platform $platform \
                  --pull \
                  --tag $new_image_platform \
                  --load \
                  --file $TEMP_DOCKERFILE \
                  .; then
                    echo "SUCCESS:$platform" >> $BUILD_RESULTS
                    
                    # 推送镜像
                    echo "Pushing $new_image_platform"
                    if ! docker push $new_image_platform; then
                        echo "推送 $new_image_platform 失败"
                        ((error_count++))
                    fi
                    
                    # 清理临时镜像
                    docker rmi $new_image_platform || true
                else
                    echo "FAILURE:$platform" >> $BUILD_RESULTS
                    echo "构建 $platform 失败"
                    ((error_count++))
                fi
                
                # 删除临时Dockerfile
                rm -f $TEMP_DOCKERFILE
            done
            
            # 读取构建结果
            successful_builds=()
            while IFS= read -r result; do
                if [[ $result == SUCCESS:* ]]; then
                    platform=${result#SUCCESS:}
                    platform_suffix="${platform//\//_}"
                    successful_builds+=("$new_image_base-$platform_suffix")
                fi
            done < $BUILD_RESULTS
            
            # 处理构建结果
            if [ ${#successful_builds[@]} -gt 1 ]; then
                echo "创建多架构清单: $new_image_base"
                if ! docker manifest create $new_image_base "${successful_builds[@]}"; then
                    echo "创建清单失败: $new_image_base"
                    ((error_count++))
                else
                    # 为清单添加架构信息
                    for platform in $(echo $SUPPORTED_PLATFORMS | tr ',' ' '); do
                        arch=$(echo $platform | awk -F'/' '{print $2}')
                        variant=$(echo $platform | awk -F'/' '{print $3}')
                        tag_suffix="${platform//\//_}"
                        
                        # 检查该平台是否成功构建
                        if grep -q "SUCCESS:$platform" "$BUILD_RESULTS"; then
                            annotate_args=("--arch" "$arch")
                            if [ -n "$variant" ]; then
                                annotate_args+=("--variant" "$variant")
                            fi
                            
                            echo "为 $new_image_base 添加 $platform 架构信息"
                            if ! docker manifest annotate "${annotate_args[@]}" $new_image_base $new_image_base-$tag_suffix; then
                                echo "添加架构信息失败: $platform"
                                ((error_count++))
                            fi
                        fi
                    done
                    
                    # 推送清单
                    echo "推送清单: $new_image_base"
                    if ! docker manifest push $new_image_base; then
                        echo "推送清单失败: $new_image_base"
                        ((error_count++))
                    fi
                fi
            elif [ ${#successful_builds[@]} -eq 1 ]; then
                echo "只有一个架构可用，直接标记 ${successful_builds[0]} 为 $new_image_base"
                if ! docker pull ${successful_builds[0]}; then
                    echo "拉取 ${successful_builds[0]} 失败"
                    ((error_count++))
                elif ! docker tag ${successful_builds[0]} $new_image_base; then
                    echo "标记镜像失败"
                    ((error_count++))
                elif ! docker push $new_image_base; then
                    echo "推送 $new_image_base 失败"
                    ((error_count++))
                fi
            else
                echo "没有成功构建任何架构，跳过清单创建"
                ((error_count++))
            fi
            
            # 删除临时文件
            rm -f $BUILD_RESULTS
            
            # 清理
            echo "清理磁盘空间"
            docker system prune -af --volumes
        done < images.txt
        
        # 检查总体错误情况
        if [ $error_count -gt 0 ]; then
            echo "完成，但有 $error_count 个错误"
            exit $error_count
        else
            echo "所有镜像处理成功"
            exit 0
        fi
