name: Docker Multi-Arch

on:
  workflow_dispatch:
  push:
    branches: [ main ]
  schedule:
    - cron: '00 00 * * *'

env:
  ALIYUN_REGISTRY: "${{ secrets.ALIYUN_REGISTRY }}"
  ALIYUN_NAME_SPACE: "${{ secrets.ALIYUN_NAME_SPACE }}"
  ALIYUN_REGISTRY_USER: "${{ secrets.ALIYUN_REGISTRY_USER }}"
  ALIYUN_REGISTRY_PASSWORD: "${{ secrets.ALIYUN_REGISTRY_PASSWORD }}"

jobs:
  build:
    name: Pull and Push Multi-Arch
    runs-on: ubuntu-latest
    steps:
    - name: Before freeing up disk space
      run: |
        echo "Before freeing up disk space"
        echo "=============================================================================="
        df -hT
        echo "=============================================================================="

    - name: Maximize build space
      uses: easimon/maximize-build-space@master
      with:
        root-reserve-mb: 2048
        swap-size-mb: 128
        remove-dotnet: 'true'
        remove-haskell: 'true'
        build-mount-path: '/var/lib/docker/'

    - name: Restart docker
      run: sudo service docker restart

    - name: Free up disk space complete
      run: |
        echo "Free up disk space complete"
        echo "=============================================================================="
        df -hT
        echo "=============================================================================="

    - name: Checkout Code
      uses: actions/checkout@v4

    - name: Set up QEMU
      uses: docker/setup-qemu-action@v3
      
    - name: Docker Setup Buildx
      uses: docker/setup-buildx-action@v3

    - name: Login to Aliyun Registry
      run: |
        echo $ALIYUN_REGISTRY_PASSWORD | docker login -u $ALIYUN_REGISTRY_USER --password-stdin $ALIYUN_REGISTRY

    - name: Process Images
      run: |
        # 数据预处理,判断镜像是否重名
        declare -A duplicate_images
        declare -A temp_map
        while IFS= read -r line || [ -n "$line" ]; do
            # 忽略空行与注释
            [[ -z "$line" ]] && continue
            if echo "$line" | grep -q '^\s*#'; then
                continue
            fi
            
            # 获取镜像的完整名称，例如kasmweb/nginx:1.25.3（命名空间/镜像名:版本号）
            image=$(echo "$line" | awk '{print $NF}')
            # 将@sha256:等字符删除
            image="${image%%@*}"
            echo "image $image"
            # 获取镜像名:版本号  例如nginx:1.25.3
            image_name_tag=$(echo "$image" | awk -F'/' '{print $NF}')
            echo "image_name_tag $image_name_tag"
            # 获取命名空间 例如kasmweb,  这里有种特殊情况 docker.io/nginx，把docker.io当成命名空间，也OK
            name_space=$(echo "$image" | awk -F'/' '{if (NF==3) print $2; else if (NF==2) print $1; else print ""}')
            echo "name_space: $name_space"
            # 这里不要是空值影响判断
            name_space="${name_space}_"
            # 获取镜像名例如nginx
            image_name=$(echo "$image_name_tag" | awk -F':' '{print $1}')
            echo "image_name: $image_name"
            
            # 如果镜像存在于数组中，则添加temp_map
            if [[ -n "${temp_map[$image_name]}" ]]; then
                 # 如果temp_map已经存在镜像名，判断是不是同一命名空间
                 if [[ "${temp_map[$image_name]}" != $name_space  ]]; then
                    echo "duplicate image name: $image_name"
                    duplicate_images[$image_name]="true"
                 fi
            else
                # 存镜像的命名空间
                temp_map[$image_name]=$name_space
            fi       
        done < images.txt
        
        # 定义要支持的架构列表
        SUPPORTED_PLATFORMS="linux/amd64,linux/arm64"
        
        while IFS= read -r line || [ -n "$line" ]; do
            # 忽略空行与注释
            [[ -z "$line" ]] && continue
            if echo "$line" | grep -q '^\s*#'; then
                continue
            fi
        
            echo "Processing image: $line"
            image=$(echo "$line" | awk '{print $NF}')
            image="${image%%@*}"
            
            # 获取镜像相关信息
            image_name_tag=$(echo "$image" | awk -F'/' '{print $NF}')
            name_space=$(echo "$image" | awk -F'/' '{if (NF==3) print $2; else if (NF==2) print $1; else print ""}')
            image_name=$(echo "$image_name_tag" | awk -F':' '{print $1}')
            
            name_space_prefix=""
            # 如果镜像名重名
            if [[ -n "${duplicate_images[$image_name]}" ]]; then
               #如果命名空间非空，将命名空间加到前缀
               if [[ -n "${name_space}" ]]; then
                  name_space_prefix="${name_space}_"
               fi
            fi
            
            # 构建目标镜像名称
            new_image_base="$ALIYUN_REGISTRY/$ALIYUN_NAME_SPACE/$name_space_prefix$image_name_tag"
            
            echo "Building multi-architecture image for: $image"
            
            # 为每个架构拉取并推送镜像
            for platform in $(echo $SUPPORTED_PLATFORMS | tr ',' ' '); do
                platform_suffix="${platform//\//_}"
                new_image_platform="$new_image_base-$platform_suffix"
                
                echo "Handling platform: $platform"
                echo "Pulling $image for $platform"
                
                # 创建临时Dockerfile
                TEMP_DOCKERFILE=$(mktemp)
                echo "FROM $image" > $TEMP_DOCKERFILE
                
                # 使用buildx创建多架构镜像
                docker buildx build \
                  --platform $platform \
                  --pull \
                  --tag $new_image_platform \
                  --load \
                  --file $TEMP_DOCKERFILE \
                  .
                
                # 删除临时文件
                rm -f $TEMP_DOCKERFILE
                
                echo "Pushing $new_image_platform"
                docker push $new_image_platform
                
                # 清理临时镜像
                docker rmi $new_image_platform || true
            done
            
            # 创建并推送镜像清单
            echo "Creating manifest list for $new_image_base"
            docker manifest create $new_image_base $(echo $SUPPORTED_PLATFORMS | tr ',' ' ' | awk -v base="$new_image_base" '{for(i=1;i<=NF;i++) printf "%s-%s ", base, $i}' | sed 's/\/_/\//g')
            
            # 为清单添加架构信息
            for platform in $(echo $SUPPORTED_PLATFORMS | tr ',' ' '); do
                arch=$(echo $platform | awk -F'/' '{print $2}')
                variant=$(echo $platform | awk -F'/' '{print $3}')
                if [ -n "$variant" ]; then
                    docker manifest annotate --arch $arch --variant $variant $new_image_base $new_image_base-${platform//\//_}
                else
                    docker manifest annotate --arch $arch $new_image_base $new_image_base-${platform//\//_}
                fi
            done
            
            # 推送镜像清单
            echo "Pushing manifest list: $new_image_base"
            docker manifest push $new_image_base
            
            echo "清理磁盘空间"
            echo "=============================================================================="
            df -hT
            echo "=============================================================================="
            
            # 清理中间镜像
            docker system prune -af --volumes
            
            echo "磁盘空间清理完毕"
            echo "=============================================================================="
            df -hT
            echo "=============================================================================="     
        done < images.txt
